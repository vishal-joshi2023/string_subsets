#include<bits/stdc++.h>
//without set skipping 
void findCombs(int index , int target , vector<int> &arr, vector<int> &ds, vector<vector<int>> &res){

	if(target == 0){
		res.push_back(ds);							
		return;  					
	}

    for(int i = index; i < arr.size(); i++) {
	
       if(i > index && arr[i]==arr[i - 1]) 
         continue; 
          
       if(arr[i] > target) 
         break;
        
       ds.push_back(arr[i]);

       findCombs(i + 1, target-arr[i], arr, ds, res);
		 
	   ds.pop_back(); 
    }
}

//using set
void solve(int i,int k,vector<int> &num,set<vector<int>> &st,vector<int> &v){

  if(k==0){
    st.insert(v);
    return;
  }
  if(i==num.size() || num[i] >k) return;
  
  //pick
  v.push_back(num[i]);
  solve(i+1,k-num[i],num,st,v);
  v.pop_back();

  //notpick
  solve(i+1,k,num,st,v);
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int k)
{
  vector<vector<int>> ans;
  vector<int> temp;
  set<vector<int>> st;

  sort(arr.begin(),arr.end());

  findCombs(0, k, arr, temp, ans);

  //solve(0,k,arr,st,temp);
  //for(auto &v:st)ans.push_back(v);

  return ans;
}
